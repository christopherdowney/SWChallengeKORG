
KORG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800313c  0800313c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800313c  0800313c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800313c  0800313c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003150  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003150  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a946  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000183f  00000000  00000000  0002a982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021249  00000000  00000000  0002d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009286  00000000  00000000  0004e739  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1941  00000000  00000000  000579bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  0011937c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080030b4 	.word	0x080030b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080030b4 	.word	0x080030b4

080001d4 <_ZN2IO3Led4initEP12GPIO_TypeDeft>:
 * @brief	Function to initialize an LED object.
 *
 * @param 	LED_GPIO The port of the GPIO connected to the LED
 * @param 	LED_Pin The pin number of the GPIO connected to the LED
 */
void Led::init( GPIO_TypeDef* LED_GPIO, uint16_t LED_Pin ){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
	_LED_GPIO = LED_GPIO;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	68ba      	ldr	r2, [r7, #8]
 80001e6:	605a      	str	r2, [r3, #4]
	_LED_Pin = LED_Pin;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	88fa      	ldrh	r2, [r7, #6]
 80001ec:	811a      	strh	r2, [r3, #8]
	currentState = OFF;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <_ZN2IO3Led3offEv>:

/*
 * @brief	Function to turn off an LED
 */
void Led::off(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LED_GPIO, _LED_Pin, (GPIO_PinState) LED_LOW_ACTIVE);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	6858      	ldr	r0, [r3, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	891b      	ldrh	r3, [r3, #8]
 8000210:	2201      	movs	r2, #1
 8000212:	4619      	mov	r1, r3
 8000214:	f000 ff40 	bl	8001098 <HAL_GPIO_WritePin>
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <_ZN2IO3Led2onEv>:
/*
 * @brief 	Function to turn on an LED
 */
void Led::on(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LED_GPIO, _LED_Pin, (GPIO_PinState) (1 - LED_LOW_ACTIVE));
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	6858      	ldr	r0, [r3, #4]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	891b      	ldrh	r3, [r3, #8]
 8000230:	2200      	movs	r2, #0
 8000232:	4619      	mov	r1, r3
 8000234:	f000 ff30 	bl	8001098 <HAL_GPIO_WritePin>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZN2IO3Led7breatheEv>:
 *
 * @note	Function counts periods of the breathing animation and uses it to index
 * 			a lookup table which contains a "sawtooth" like array of duty cycles to create
 * 			a PWM signal for the LED.
 */
void Led::breathe(){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

	currentState = BREATHE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2203      	movs	r2, #3
 800024c:	701a      	strb	r2, [r3, #0]

	//moving to next period of animation
	if(_brightnessCounter >= LED_BREATHE_PERIOD){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	7b5b      	ldrb	r3, [r3, #13]
 8000252:	2bc7      	cmp	r3, #199	; 0xc7
 8000254:	d909      	bls.n	800026a <_ZN2IO3Led7breatheEv+0x2a>
		_brightnessCounter = 0;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	735a      	strb	r2, [r3, #13]
		_breatheCounter ++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	7bdb      	ldrb	r3, [r3, #15]
 8000260:	3301      	adds	r3, #1
 8000262:	b2da      	uxtb	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	73da      	strb	r2, [r3, #15]
 8000268:	e00d      	b.n	8000286 <_ZN2IO3Led7breatheEv+0x46>
	}
	//restarting the animation
	else if(_breatheCounter >= LED_N_BGHT_ENTRIES){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	7bdb      	ldrb	r3, [r3, #15]
 800026e:	2b3f      	cmp	r3, #63	; 0x3f
 8000270:	d903      	bls.n	800027a <_ZN2IO3Led7breatheEv+0x3a>
		_breatheCounter = 0;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2200      	movs	r2, #0
 8000276:	73da      	strb	r2, [r3, #15]
 8000278:	e005      	b.n	8000286 <_ZN2IO3Led7breatheEv+0x46>
	}
	//increment within a period
	else{
		_brightnessCounter++;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	7b5b      	ldrb	r3, [r3, #13]
 800027e:	3301      	adds	r3, #1
 8000280:	b2da      	uxtb	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	735a      	strb	r2, [r3, #13]
	}
	//index LUT to find duty cycle
	_brightnessPeriod = brightnessLookup[_breatheCounter];
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	7bdb      	ldrb	r3, [r3, #15]
 800028a:	461a      	mov	r2, r3
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <_ZN2IO3Led7breatheEv+0x78>)
 800028e:	5c9a      	ldrb	r2, [r3, r2]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	739a      	strb	r2, [r3, #14]
	//turn on LED if within duty cycle limit
	if(_brightnessCounter <= _brightnessPeriod){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7b5a      	ldrb	r2, [r3, #13]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	7b9b      	ldrb	r3, [r3, #14]
 800029c:	429a      	cmp	r2, r3
 800029e:	d803      	bhi.n	80002a8 <_ZN2IO3Led7breatheEv+0x68>
		on();
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ffbd 	bl	8000220 <_ZN2IO3Led2onEv>
	}
	else{
		off();
	}
}
 80002a6:	e002      	b.n	80002ae <_ZN2IO3Led7breatheEv+0x6e>
		off();
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f7ff ffa9 	bl	8000200 <_ZN2IO3Led3offEv>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	080030cc 	.word	0x080030cc

080002bc <_ZN2IO3Led3dimEh>:
 * @brief	Function to set the brightness of an LED by creating a PWM signal whose duty cycle
 * 			is proportional to the input brightness level
 *
 * @param	brightnessLevel Input brightness as a percentage
 */
void Led::dim(uint8_t brightnessLevel){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	460b      	mov	r3, r1
 80002c6:	72fb      	strb	r3, [r7, #11]

	currentState = DIM;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2202      	movs	r2, #2
 80002cc:	701a      	strb	r2, [r3, #0]
	_brightnessLevel = brightnessLevel;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	7afa      	ldrb	r2, [r7, #11]
 80002d2:	731a      	strb	r2, [r3, #12]

	// _brightnessCounter counts from 1 to 200 to give 30Hz
	if(_brightnessCounter >= LED_BREATHE_PERIOD){
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	7b5b      	ldrb	r3, [r3, #13]
 80002d8:	2bc7      	cmp	r3, #199	; 0xc7
 80002da:	d903      	bls.n	80002e4 <_ZN2IO3Led3dimEh+0x28>
		_brightnessCounter = 0;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2200      	movs	r2, #0
 80002e0:	735a      	strb	r2, [r3, #13]
 80002e2:	e005      	b.n	80002f0 <_ZN2IO3Led3dimEh+0x34>
	}
	else{
		_brightnessCounter++;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	7b5b      	ldrb	r3, [r3, #13]
 80002e8:	3301      	adds	r3, #1
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	735a      	strb	r2, [r3, #13]
	}
	// conversion from percentage to index of LUT
	float brightnessIdx =  (float)LED_N_BGHT_LEVELS * ((float)_brightnessLevel/LED_BRIGHTNESS_MAX);
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	7b1b      	ldrb	r3, [r3, #12]
 80002f4:	ee07 3a90 	vmov	s15, r3
 80002f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800034c <_ZN2IO3Led3dimEh+0x90>
 8000300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000304:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000350 <_ZN2IO3Led3dimEh+0x94>
 8000308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800030c:	edc7 7a05 	vstr	s15, [r7, #20]
	_brightnessPeriod = brightnessLookup[(uint8_t) brightnessIdx];
 8000310:	edd7 7a05 	vldr	s15, [r7, #20]
 8000314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000318:	edc7 7a01 	vstr	s15, [r7, #4]
 800031c:	793b      	ldrb	r3, [r7, #4]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	461a      	mov	r2, r3
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <_ZN2IO3Led3dimEh+0x98>)
 8000324:	5c9a      	ldrb	r2, [r3, r2]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	739a      	strb	r2, [r3, #14]

	//turn on LED if within duty cycle limit
	if(_brightnessCounter <= _brightnessPeriod){
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	7b5a      	ldrb	r2, [r3, #13]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	7b9b      	ldrb	r3, [r3, #14]
 8000332:	429a      	cmp	r2, r3
 8000334:	d803      	bhi.n	800033e <_ZN2IO3Led3dimEh+0x82>
		on();
 8000336:	68f8      	ldr	r0, [r7, #12]
 8000338:	f7ff ff72 	bl	8000220 <_ZN2IO3Led2onEv>
	}
	else{
		off();
	}

}
 800033c:	e002      	b.n	8000344 <_ZN2IO3Led3dimEh+0x88>
		off();
 800033e:	68f8      	ldr	r0, [r7, #12]
 8000340:	f7ff ff5e 	bl	8000200 <_ZN2IO3Led3offEv>
}
 8000344:	bf00      	nop
 8000346:	3718      	adds	r7, #24
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	42c80000 	.word	0x42c80000
 8000350:	42000000 	.word	0x42000000
 8000354:	080030cc 	.word	0x080030cc

08000358 <_ZN2IO3Led5blinkEv>:

/*
 * @brief	Function to blink an LED three times at 4Hz
 */
void Led::blink(){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	//handling returns to previous state
	if(currentState != BLINK){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b04      	cmp	r3, #4
 8000366:	d006      	beq.n	8000376 <_ZN2IO3Led5blinkEv+0x1e>
		_returnState = currentState;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	729a      	strb	r2, [r3, #10]
		currentState = BLINK;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2204      	movs	r2, #4
 8000374:	701a      	strb	r2, [r3, #0]
	}
	//blinkCounter counts through the period of a blink
	_blinkCounter++;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	8a5b      	ldrh	r3, [r3, #18]
 800037a:	3301      	adds	r3, #1
 800037c:	b29a      	uxth	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	825a      	strh	r2, [r3, #18]

	//since the led needs to be off then on then off to visibly blink regardless of previous state
	//the blink period is divided in to three equal parts
	if(_blinkCounter >= LED_BLINK_OFFSET && _blinkCounter <= LED_BLINK_PERIOD/3){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	8a5b      	ldrh	r3, [r3, #18]
 8000386:	2b09      	cmp	r3, #9
 8000388:	d908      	bls.n	800039c <_ZN2IO3Led5blinkEv+0x44>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	8a5b      	ldrh	r3, [r3, #18]
 800038e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000392:	d803      	bhi.n	800039c <_ZN2IO3Led5blinkEv+0x44>
		off();
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff33 	bl	8000200 <_ZN2IO3Led3offEv>
 800039a:	e010      	b.n	80003be <_ZN2IO3Led5blinkEv+0x66>
	}
	else if(_blinkCounter >= LED_BLINK_PERIOD/3 && _blinkCounter <= 2*LED_BLINK_PERIOD/3){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	8a5b      	ldrh	r3, [r3, #18]
 80003a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80003a4:	d308      	bcc.n	80003b8 <_ZN2IO3Led5blinkEv+0x60>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	8a5b      	ldrh	r3, [r3, #18]
 80003aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003ae:	d803      	bhi.n	80003b8 <_ZN2IO3Led5blinkEv+0x60>
		on();
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff35 	bl	8000220 <_ZN2IO3Led2onEv>
 80003b6:	e002      	b.n	80003be <_ZN2IO3Led5blinkEv+0x66>
	}
	else{
		off();
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff21 	bl	8000200 <_ZN2IO3Led3offEv>
	}

	//reaching the end of a blink period
	if(_blinkCounter >= LED_BLINK_PERIOD){
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	8a5b      	ldrh	r3, [r3, #18]
 80003c2:	f240 52db 	movw	r2, #1499	; 0x5db
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d913      	bls.n	80003f2 <_ZN2IO3Led5blinkEv+0x9a>
		//reseting blink period counter and incrementing blink repetition counter
		_blinkCounter = 0;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	825a      	strh	r2, [r3, #18]
		_blinkRepCounter ++;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	8a9b      	ldrh	r3, [r3, #20]
 80003d4:	3301      	adds	r3, #1
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	829a      	strh	r2, [r3, #20]
		//reaching the end of three blink periods
		if(_blinkRepCounter >= LED_BLINK_COUNT){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	8a9b      	ldrh	r3, [r3, #20]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d906      	bls.n	80003f2 <_ZN2IO3Led5blinkEv+0x9a>
			_blinkRepCounter = 0;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2200      	movs	r2, #0
 80003e8:	829a      	strh	r2, [r3, #20]
			currentState = _returnState;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7a9a      	ldrb	r2, [r3, #10]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_ZN2IO3Led12blinkHoldOffEv>:
/*
 * @brief	Function of blink an LED three times at 4Hz then hold the LED Off for 1 second.
 */
void Led::blinkHoldOff(){
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
	//checking if we have transitioned from a different state and not returned from the blink state
	if(currentState != BLINK_HOLD_OFF && currentState != BLINK){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b06      	cmp	r3, #6
 8000408:	d00e      	beq.n	8000428 <_ZN2IO3Led12blinkHoldOffEv+0x2e>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d00a      	beq.n	8000428 <_ZN2IO3Led12blinkHoldOffEv+0x2e>
		_holdState = currentState;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781a      	ldrb	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	72da      	strb	r2, [r3, #11]
		currentState = BLINK_HOLD_OFF;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2206      	movs	r2, #6
 800041e:	701a      	strb	r2, [r3, #0]
		//executing three blinks
		blink();
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f7ff ff99 	bl	8000358 <_ZN2IO3Led5blinkEv>
 8000426:	e008      	b.n	800043a <_ZN2IO3Led12blinkHoldOffEv+0x40>
	}
	else{
		//holding off
		off();
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff fee9 	bl	8000200 <_ZN2IO3Led3offEv>
		_holdCounter++;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	8a1b      	ldrh	r3, [r3, #16]
 8000432:	3301      	adds	r3, #1
 8000434:	b29a      	uxth	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	821a      	strh	r2, [r3, #16]
	}
	//reaching the end of the hold period
	if(_holdCounter >= LED_HOLD_PERIOD){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	8a1b      	ldrh	r3, [r3, #16]
 800043e:	f241 726f 	movw	r2, #5999	; 0x176f
 8000442:	4293      	cmp	r3, r2
 8000444:	d906      	bls.n	8000454 <_ZN2IO3Led12blinkHoldOffEv+0x5a>
		//reseting the counter and returning to the original state
		_holdCounter = 0;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	821a      	strh	r2, [r3, #16]
		currentState = _holdState;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	7ada      	ldrb	r2, [r3, #11]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	701a      	strb	r2, [r3, #0]
	}
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZN2IO3Led11blinkHoldOnEv>:
/*
 * @brief	Function of blink an LED three times at 4Hz then hold the LED Off for 1 second.
 */
void Led::blinkHoldOn(){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	//checking if we have transitioned from a different state and not returned from the blink state
	if(currentState != BLINK_HOLD_ON && currentState != BLINK){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b05      	cmp	r3, #5
 800046a:	d00e      	beq.n	800048a <_ZN2IO3Led11blinkHoldOnEv+0x2e>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d00a      	beq.n	800048a <_ZN2IO3Led11blinkHoldOnEv+0x2e>
		_holdState = currentState;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	72da      	strb	r2, [r3, #11]
		currentState = BLINK_HOLD_ON;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2205      	movs	r2, #5
 8000480:	701a      	strb	r2, [r3, #0]
		//executing three blinks
		blink();
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ff68 	bl	8000358 <_ZN2IO3Led5blinkEv>
 8000488:	e008      	b.n	800049c <_ZN2IO3Led11blinkHoldOnEv+0x40>
	}
	else{
		//holding on
		on();
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff fec8 	bl	8000220 <_ZN2IO3Led2onEv>
		_holdCounter++;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	8a1b      	ldrh	r3, [r3, #16]
 8000494:	3301      	adds	r3, #1
 8000496:	b29a      	uxth	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	821a      	strh	r2, [r3, #16]
	}
	//reaching the end of the hold period
	if(_holdCounter >= LED_HOLD_PERIOD){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	8a1b      	ldrh	r3, [r3, #16]
 80004a0:	f241 726f 	movw	r2, #5999	; 0x176f
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d906      	bls.n	80004b6 <_ZN2IO3Led11blinkHoldOnEv+0x5a>
		//reseting the counter and returning to the original state
		_holdCounter = 0;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	821a      	strh	r2, [r3, #16]
		currentState = _holdState;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7ada      	ldrb	r2, [r3, #11]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	701a      	strb	r2, [r3, #0]
	}
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <_ZN2IO3Led6updateEv>:

// call reqularly to update hardware
void Led::update(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	switch(currentState){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	d832      	bhi.n	8000536 <_ZN2IO3Led6updateEv+0x76>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <_ZN2IO3Led6updateEv+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004f9 	.word	0x080004f9
 80004dc:	08000501 	.word	0x08000501
 80004e0:	08000509 	.word	0x08000509
 80004e4:	08000517 	.word	0x08000517
 80004e8:	0800051f 	.word	0x0800051f
 80004ec:	08000527 	.word	0x08000527
 80004f0:	0800052f 	.word	0x0800052f
 80004f4:	0800053f 	.word	0x0800053f

	case OFF:
		off();
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff fe81 	bl	8000200 <_ZN2IO3Led3offEv>
		break;
 80004fe:	e01f      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case ON:
		on();
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff fe8d 	bl	8000220 <_ZN2IO3Led2onEv>
		break;
 8000506:	e01b      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case DIM:
		dim(_brightnessLevel);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7b1b      	ldrb	r3, [r3, #12]
 800050c:	4619      	mov	r1, r3
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f7ff fed4 	bl	80002bc <_ZN2IO3Led3dimEh>
		break;
 8000514:	e014      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case BREATHE:
		breathe();
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff fe92 	bl	8000240 <_ZN2IO3Led7breatheEv>
		break;
 800051c:	e010      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case BLINK:
		blink();
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f7ff ff1a 	bl	8000358 <_ZN2IO3Led5blinkEv>
		break;
 8000524:	e00c      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case BLINK_HOLD_ON:
		blinkHoldOn();
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff98 	bl	800045c <_ZN2IO3Led11blinkHoldOnEv>
		break;
 800052c:	e008      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case BLINK_HOLD_OFF:
		blinkHoldOff();
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff63 	bl	80003fa <_ZN2IO3Led12blinkHoldOffEv>
		break;
 8000534:	e004      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>

	case HOLD:
		break;

	default:
		currentState = OFF;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
		break;
 800053c:	e000      	b.n	8000540 <_ZN2IO3Led6updateEv+0x80>
		break;
 800053e:	bf00      	nop
	}

}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa68 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f87a 	bl	8000648 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  //Initialize LEDs here
  //setup TimerCallback frequency done in MX_TIM1_Init()
  LED_PWR.init(GPIOC, GPIO_PIN_3);
 8000554:	2208      	movs	r2, #8
 8000556:	4937      	ldr	r1, [pc, #220]	; (8000634 <main+0xec>)
 8000558:	4837      	ldr	r0, [pc, #220]	; (8000638 <main+0xf0>)
 800055a:	f7ff fe3b 	bl	80001d4 <_ZN2IO3Led4initEP12GPIO_TypeDeft>
  LED_CLIP.init(GPIOC, GPIO_PIN_8);
 800055e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000562:	4934      	ldr	r1, [pc, #208]	; (8000634 <main+0xec>)
 8000564:	4835      	ldr	r0, [pc, #212]	; (800063c <main+0xf4>)
 8000566:	f7ff fe35 	bl	80001d4 <_ZN2IO3Led4initEP12GPIO_TypeDeft>
  LED_SW1.init(GPIOC, GPIO_PIN_10);
 800056a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800056e:	4931      	ldr	r1, [pc, #196]	; (8000634 <main+0xec>)
 8000570:	4833      	ldr	r0, [pc, #204]	; (8000640 <main+0xf8>)
 8000572:	f7ff fe2f 	bl	80001d4 <_ZN2IO3Led4initEP12GPIO_TypeDeft>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f937 	bl	80007e8 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800057a:	f000 f8d3 	bl	8000724 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  //Timer started, updates generated at 6kHz
  HAL_TIM_Base_Start_IT(&htim1);
 800057e:	4831      	ldr	r0, [pc, #196]	; (8000644 <main+0xfc>)
 8000580:	f002 f914 	bl	80027ac <HAL_TIM_Base_Start_IT>
  //set LED_PWR to breathe
  LED_PWR.currentState = BREATHE;
 8000584:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <main+0xf0>)
 8000586:	2203      	movs	r2, #3
 8000588:	701a      	strb	r2, [r3, #0]
  //set LED_SW1 on
  LED_SW1.currentState = ON;
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <main+0xf8>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
  //set LED_CLIP to 20% brightness
  LED_CLIP.dim(20);
 8000590:	2114      	movs	r1, #20
 8000592:	482a      	ldr	r0, [pc, #168]	; (800063c <main+0xf4>)
 8000594:	f7ff fe92 	bl	80002bc <_ZN2IO3Led3dimEh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //when button 1 is pressed, toggle LED_SW1
	  if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET){
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4825      	ldr	r0, [pc, #148]	; (8000634 <main+0xec>)
 800059e:	f000 fd63 	bl	8001068 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf0c      	ite	eq
 80005a8:	2301      	moveq	r3, #1
 80005aa:	2300      	movne	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d01e      	beq.n	80005f0 <main+0xa8>
		  //debounce of button
		  HAL_Delay(50);
 80005b2:	2032      	movs	r0, #50	; 0x32
 80005b4:	f000 fa9a 	bl	8000aec <HAL_Delay>
		  if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET){
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	481d      	ldr	r0, [pc, #116]	; (8000634 <main+0xec>)
 80005be:	f000 fd53 	bl	8001068 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf0c      	ite	eq
 80005c8:	2301      	moveq	r3, #1
 80005ca:	2300      	movne	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00a      	beq.n	80005e8 <main+0xa0>
			  if(LED_SW1.currentState == OFF)
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <main+0xf8>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <main+0x9a>
				  LED_SW1.currentState = ON;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <main+0xf8>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e002      	b.n	80005e8 <main+0xa0>
			  else
				  LED_SW1.currentState = OFF;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <main+0xf8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_Delay(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f000 fa7e 	bl	8000aec <HAL_Delay>
	  }

	  //when button 2 is pressed, blink and hold on LED_CLIP
	  if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET){
 80005f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <main+0xec>)
 80005f6:	f000 fd37 	bl	8001068 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0c6      	beq.n	8000598 <main+0x50>
		  //debounce of button
		  HAL_Delay(50);
 800060a:	2032      	movs	r0, #50	; 0x32
 800060c:	f000 fa6e 	bl	8000aec <HAL_Delay>
		  if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_RESET){
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0xec>)
 8000616:	f000 fd27 	bl	8001068 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0b6      	beq.n	8000598 <main+0x50>
			  LED_CLIP.blinkHoldOn();
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <main+0xf4>)
 800062c:	f7ff ff16 	bl	800045c <_ZN2IO3Led11blinkHoldOnEv>
	  if(HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET){
 8000630:	e7b2      	b.n	8000598 <main+0x50>
 8000632:	bf00      	nop
 8000634:	48000800 	.word	0x48000800
 8000638:	20000074 	.word	0x20000074
 800063c:	2000008c 	.word	0x2000008c
 8000640:	200000a4 	.word	0x200000a4
 8000644:	20000028 	.word	0x20000028

08000648 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0a6      	sub	sp, #152	; 0x98
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000652:	2228      	movs	r2, #40	; 0x28
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fd24 	bl	80030a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2258      	movs	r2, #88	; 0x58
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fd16 	bl	80030a4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000694:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fd0e 	bl	80010c8 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf14      	ite	ne
 80006b2:	2301      	movne	r3, #1
 80006b4:	2300      	moveq	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80006bc:	f000 f8ea 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fc09 	bl	8001ef4 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	bf14      	ite	ne
 80006e8:	2301      	movne	r3, #1
 80006ea:	2300      	moveq	r3, #0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80006f2:	f000 f8cf 	bl	8000894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fddc 	bl	80022c0 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000718:	f000 f8bc 	bl	8000894 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3798      	adds	r7, #152	; 0x98
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <_ZL12MX_TIM1_Initv+0xc0>)
 8000746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000756:	f640 729f 	movw	r2, #3999	; 0xf9f
 800075a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000770:	f001 ffc4 	bl	80026fc <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000784:	f000 f886 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000796:	f002 f998 	bl	8002aca <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 80007aa:	f000 f873 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007ae:	2320      	movs	r3, #32
 80007b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <_ZL12MX_TIM1_Initv+0xbc>)
 80007c0:	f002 fba2 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 80007d4:	f000 f85e 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <_ZL12MX_GPIO_Initv+0x74>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	4a16      	ldr	r2, [pc, #88]	; (800085c <_ZL12MX_GPIO_Initv+0x74>)
 8000802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000806:	6153      	str	r3, [r2, #20]
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <_ZL12MX_GPIO_Initv+0x74>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <_ZL12MX_GPIO_Initv+0x78>)
 800081c:	f000 fc3c 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000820:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <_ZL12MX_GPIO_Initv+0x78>)
 8000834:	f000 fa8e 	bl	8000d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_10;
 8000838:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 800083c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <_ZL12MX_GPIO_Initv+0x78>)
 8000850:	f000 fa80 	bl	8000d54 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800

08000864 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,GPIO_PIN_RESET);
	LED_PWR.update();
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800086e:	f7ff fe27 	bl	80004c0 <_ZN2IO3Led6updateEv>
	LED_CLIP.update();
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000874:	f7ff fe24 	bl	80004c0 <_ZN2IO3Led6updateEv>
	LED_SW1.update();
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800087a:	f7ff fe21 	bl	80004c0 <_ZN2IO3Led6updateEv>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000074 	.word	0x20000074
 800088c:	2000008c 	.word	0x2000008c
 8000890:	200000a4 	.word	0x200000a4

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_TIM_Base_MspInit+0x44>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d113      	bne.n	8000926 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_TIM_Base_MspInit+0x48>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <HAL_TIM_Base_MspInit+0x48>)
 8000904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_Base_MspInit+0x48>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2019      	movs	r0, #25
 800091c:	f000 f9e3 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000920:	2019      	movs	r0, #25
 8000922:	f000 f9fc 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40012c00 	.word	0x40012c00
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f88e 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800099a:	f001 ff77 	bl	800288c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028

080009a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopForever+0xe>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopForever+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 fb2f 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009fe:	f7ff fda3 	bl	8000548 <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a10:	08003144 	.word	0x08003144
  ldr r2, =_sbss
 8000a14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a18:	200000c0 	.word	0x200000c0

08000a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x28>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x28>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f94d 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff ff32 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f965 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f92d 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000bc 	.word	0x200000bc

08000ad4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000bc 	.word	0x200000bc

08000aec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_Delay+0x40>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff29 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff3e 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff31 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e160      	b.n	8001026 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8152 	beq.w	8001020 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d005      	beq.n	8000d94 <HAL_GPIO_Init+0x40>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 0201 	and.w	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d017      	beq.n	8000e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d123      	bne.n	8000e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	6939      	ldr	r1, [r7, #16]
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0203 	and.w	r2, r3, #3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 80ac 	beq.w	8001020 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec8:	4b5e      	ldr	r3, [pc, #376]	; (8001044 <HAL_GPIO_Init+0x2f0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a5d      	ldr	r2, [pc, #372]	; (8001044 <HAL_GPIO_Init+0x2f0>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <HAL_GPIO_Init+0x2f0>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee0:	4a59      	ldr	r2, [pc, #356]	; (8001048 <HAL_GPIO_Init+0x2f4>)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0a:	d025      	beq.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	; (800104c <HAL_GPIO_Init+0x2f8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d01f      	beq.n	8000f54 <HAL_GPIO_Init+0x200>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_GPIO_Init+0x2fc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d019      	beq.n	8000f50 <HAL_GPIO_Init+0x1fc>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4d      	ldr	r2, [pc, #308]	; (8001054 <HAL_GPIO_Init+0x300>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1f8>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1f4>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x308>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1f0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1ec>
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	e00c      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f40:	2307      	movs	r3, #7
 8000f42:	e00a      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f44:	2305      	movs	r3, #5
 8000f46:	e008      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e004      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e002      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	f002 0203 	and.w	r2, r2, #3
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	4093      	lsls	r3, r2
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6a:	4937      	ldr	r1, [pc, #220]	; (8001048 <HAL_GPIO_Init+0x2f4>)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9c:	4a31      	ldr	r2, [pc, #196]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fc6:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_GPIO_Init+0x310>)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	f47f ae97 	bne.w	8000d64 <HAL_GPIO_Init+0x10>
  }
}
 8001036:	bf00      	nop
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	48000400 	.word	0x48000400
 8001050:	48000800 	.word	0x48000800
 8001054:	48000c00 	.word	0x48000c00
 8001058:	48001000 	.word	0x48001000
 800105c:	48001400 	.word	0x48001400
 8001060:	48001800 	.word	0x48001800
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f000 bf01 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8160 	beq.w	80013b2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f2:	4bae      	ldr	r3, [pc, #696]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00c      	beq.n	8001118 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fe:	4bab      	ldr	r3, [pc, #684]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b08      	cmp	r3, #8
 8001108:	d159      	bne.n	80011be <HAL_RCC_OscConfig+0xf6>
 800110a:	4ba8      	ldr	r3, [pc, #672]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d152      	bne.n	80011be <HAL_RCC_OscConfig+0xf6>
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800112c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d102      	bne.n	800114a <HAL_RCC_OscConfig+0x82>
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0xae>
 800114a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001166:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001172:	4b8e      	ldr	r3, [pc, #568]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800117e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001182:	fa92 f2a2 	rbit	r2, r2
 8001186:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800118a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8102 	beq.w	80013b0 <HAL_RCC_OscConfig+0x2e8>
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 80fc 	bne.w	80013b0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f000 be93 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d106      	bne.n	80011d8 <HAL_RCC_OscConfig+0x110>
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a77      	ldr	r2, [pc, #476]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e030      	b.n	800123a <HAL_RCC_OscConfig+0x172>
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x134>
 80011e2:	4b72      	ldr	r3, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a71      	ldr	r2, [pc, #452]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6e      	ldr	r2, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x172>
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001206:	d10c      	bne.n	8001222 <HAL_RCC_OscConfig+0x15a>
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a67      	ldr	r2, [pc, #412]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 800120e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b65      	ldr	r3, [pc, #404]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a64      	ldr	r2, [pc, #400]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 800121a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e00b      	b.n	800123a <HAL_RCC_OscConfig+0x172>
 8001222:	4b62      	ldr	r3, [pc, #392]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a61      	ldr	r2, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d059      	beq.n	80012f8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fc46 	bl	8000ad4 <HAL_GetTick>
 8001248:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124e:	f7ff fc41 	bl	8000ad4 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d902      	bls.n	8001264 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	f000 be40 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001268:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001278:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d102      	bne.n	8001296 <HAL_RCC_OscConfig+0x1ce>
 8001290:	4b46      	ldr	r3, [pc, #280]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x1fa>
 8001296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80012aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80012ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	f002 021f 	and.w	r2, r2, #31
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0ab      	beq.n	800124e <HAL_RCC_OscConfig+0x186>
 80012f6:	e05c      	b.n	80013b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fbec 	bl	8000ad4 <HAL_GetTick>
 80012fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001302:	f7ff fbe7 	bl	8000ad4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d902      	bls.n	8001318 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	f000 bde6 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800132c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x282>
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x2ae>
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001366:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_RCC_OscConfig+0x2e4>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800137a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800137e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800138a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800138e:	fab2 f282 	clz	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ab      	bne.n	8001302 <HAL_RCC_OscConfig+0x23a>
 80013aa:	e002      	b.n	80013b2 <HAL_RCC_OscConfig+0x2ea>
 80013ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8170 	beq.w	80016a2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013c2:	4bd0      	ldr	r3, [pc, #832]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ce:	4bcd      	ldr	r3, [pc, #820]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d16d      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3ee>
 80013da:	4bca      	ldr	r3, [pc, #808]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e6:	d166      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3ee>
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x350>
 8001412:	4bbc      	ldr	r3, [pc, #752]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	e013      	b.n	8001440 <HAL_RCC_OscConfig+0x378>
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001430:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800143c:	4bb1      	ldr	r3, [pc, #708]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2202      	movs	r2, #2
 8001442:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001446:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800144a:	fa92 f2a2 	rbit	r2, r2
 800144e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001452:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001456:	fab2 f282 	clz	r2, r2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f042 0220 	orr.w	r2, r2, #32
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f002 021f 	and.w	r2, r2, #31
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_RCC_OscConfig+0x3ba>
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d002      	beq.n	8001482 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	f000 bd31 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4ba0      	ldr	r3, [pc, #640]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	21f8      	movs	r1, #248	; 0xf8
 8001492:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800149a:	fa91 f1a1 	rbit	r1, r1
 800149e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80014a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014a6:	fab1 f181 	clz	r1, r1
 80014aa:	b2c9      	uxtb	r1, r1
 80014ac:	408b      	lsls	r3, r1
 80014ae:	4995      	ldr	r1, [pc, #596]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b4:	e0f5      	b.n	80016a2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8085 	beq.w	80015cc <HAL_RCC_OscConfig+0x504>
 80014c2:	2301      	movs	r3, #1
 80014c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	461a      	mov	r2, r3
 80014ea:	2301      	movs	r3, #1
 80014ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff faf1 	bl	8000ad4 <HAL_GetTick>
 80014f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff faec 	bl	8000ad4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d902      	bls.n	800150e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	f000 bceb 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001520:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x476>
 8001538:	4b72      	ldr	r3, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e013      	b.n	8001566 <HAL_RCC_OscConfig+0x49e>
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001556:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001562:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2202      	movs	r2, #2
 8001568:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800156c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001570:	fa92 f2a2 	rbit	r2, r2
 8001574:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001578:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800157c:	fab2 f282 	clz	r2, r2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f042 0220 	orr.w	r2, r2, #32
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f002 021f 	and.w	r2, r2, #31
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0af      	beq.n	80014f8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	21f8      	movs	r1, #248	; 0xf8
 80015a8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80015b0:	fa91 f1a1 	rbit	r1, r1
 80015b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80015b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015bc:	fab1 f181 	clz	r1, r1
 80015c0:	b2c9      	uxtb	r1, r1
 80015c2:	408b      	lsls	r3, r1
 80015c4:	494f      	ldr	r1, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
 80015ca:	e06a      	b.n	80016a2 <HAL_RCC_OscConfig+0x5da>
 80015cc:	2301      	movs	r3, #1
 80015ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	461a      	mov	r2, r3
 80015f4:	2300      	movs	r3, #0
 80015f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa6c 	bl	8000ad4 <HAL_GetTick>
 80015fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fa67 	bl	8000ad4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d902      	bls.n	8001618 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	f000 bc66 	b.w	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800162a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x580>
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e013      	b.n	8001670 <HAL_RCC_OscConfig+0x5a8>
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001660:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_RCC_OscConfig+0x63c>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2202      	movs	r2, #2
 8001672:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001676:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800167a:	fa92 f2a2 	rbit	r2, r2
 800167e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001682:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001686:	fab2 f282 	clz	r2, r2
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f042 0220 	orr.w	r2, r2, #32
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f002 021f 	and.w	r2, r2, #31
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1af      	bne.n	8001602 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80da 	beq.w	8001866 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d069      	beq.n	8001790 <HAL_RCC_OscConfig+0x6c8>
 80016bc:	2301      	movs	r3, #1
 80016be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x640>)
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff f9f5 	bl	8000ad4 <HAL_GetTick>
 80016ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	e00d      	b.n	800170c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff f9f0 	bl	8000ad4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d905      	bls.n	800170c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e3ef      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001704:	40021000 	.word	0x40021000
 8001708:	10908120 	.word	0x10908120
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800173c:	2202      	movs	r2, #2
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800174e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001750:	4ba4      	ldr	r3, [pc, #656]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001754:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001758:	2102      	movs	r1, #2
 800175a:	6019      	str	r1, [r3, #0]
 800175c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	fa93 f1a3 	rbit	r1, r3
 8001766:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800176a:	6019      	str	r1, [r3, #0]
  return result;
 800176c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0b0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x628>
 800178e:	e06a      	b.n	8001866 <HAL_RCC_OscConfig+0x79e>
 8001790:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	fa93 f2a3 	rbit	r2, r3
 80017a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017a6:	601a      	str	r2, [r3, #0]
  return result;
 80017a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <HAL_RCC_OscConfig+0x920>)
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	461a      	mov	r2, r3
 80017be:	2300      	movs	r3, #0
 80017c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff f987 	bl	8000ad4 <HAL_GetTick>
 80017c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ca:	e009      	b.n	80017e0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff f982 	bl	8000ad4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e381      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 80017e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001814:	2202      	movs	r2, #2
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001826:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 800182a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001830:	2102      	movs	r1, #2
 8001832:	6019      	str	r1, [r3, #0]
 8001834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f1a3 	rbit	r1, r3
 800183e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001842:	6019      	str	r1, [r3, #0]
  return result;
 8001844:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1b2      	bne.n	80017cc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8157 	beq.w	8001b24 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001892:	61d3      	str	r3, [r2, #28]
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_RCC_OscConfig+0x924>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ba:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_RCC_OscConfig+0x924>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a4b      	ldr	r2, [pc, #300]	; (80019ec <HAL_RCC_OscConfig+0x924>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f905 	bl	8000ad4 <HAL_GetTick>
 80018ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	e009      	b.n	80018e4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d0:	f7ff f900 	bl	8000ad4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e2ff      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x924>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ef      	beq.n	80018d0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x840>
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a39      	ldr	r2, [pc, #228]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	e02f      	b.n	8001968 <HAL_RCC_OscConfig+0x8a0>
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x864>
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0x8a0>
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x888>
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a2a      	ldr	r2, [pc, #168]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x8a0>
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d06a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f8af 	bl	8000ad4 <HAL_GetTick>
 8001976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff f8aa 	bl	8000ad4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e2a7      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001994:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001998:	2202      	movs	r2, #2
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019c2:	601a      	str	r2, [r3, #0]
  return result;
 80019c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x928>
 80019de:	4b01      	ldr	r3, [pc, #4]	; (80019e4 <HAL_RCC_OscConfig+0x91c>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	e013      	b.n	8001a0c <HAL_RCC_OscConfig+0x944>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	10908120 	.word	0x10908120
 80019ec:	40007000 	.word	0x40007000
 80019f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019f4:	2202      	movs	r2, #2
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	4bc0      	ldr	r3, [pc, #768]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a10:	2102      	movs	r1, #2
 8001a12:	6011      	str	r1, [r2, #0]
 8001a14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	fa92 f1a2 	rbit	r1, r2
 8001a1e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a22:	6011      	str	r1, [r2, #0]
  return result;
 8001a24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d09a      	beq.n	800197c <HAL_RCC_OscConfig+0x8b4>
 8001a46:	e063      	b.n	8001b10 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f844 	bl	8000ad4 <HAL_GetTick>
 8001a4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff f83f 	bl	8000ad4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e23c      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001a6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a6e:	2202      	movs	r2, #2
 8001a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a86:	2202      	movs	r2, #2
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a98:	601a      	str	r2, [r3, #0]
  return result;
 8001a9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_OscConfig+0x9f2>
 8001ab4:	4b95      	ldr	r3, [pc, #596]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	e00d      	b.n	8001ad6 <HAL_RCC_OscConfig+0xa0e>
 8001aba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001abe:	2202      	movs	r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ada:	2102      	movs	r1, #2
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	fa92 f1a2 	rbit	r1, r2
 8001ae8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aec:	6011      	str	r1, [r2, #0]
  return result;
 8001aee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1a0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b10:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b18:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a7b      	ldr	r2, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 81d9 	beq.w	8001ee2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b30:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	f000 81a6 	beq.w	8001e8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	f040 811e 	bne.w	8001d86 <HAL_RCC_OscConfig+0xcbe>
 8001b4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b62:	601a      	str	r2, [r3, #0]
  return result;
 8001b64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe ffa8 	bl	8000ad4 <HAL_GetTick>
 8001b84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe ffa3 	bl	8000ad4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1a2      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001b9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bb6:	601a      	str	r2, [r3, #0]
  return result;
 8001bb8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xb10>
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	e01b      	b.n	8001c10 <HAL_RCC_OscConfig+0xb48>
 8001bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	fa93 f2a3 	rbit	r2, r3
 8001bec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c18:	6011      	str	r1, [r2, #0]
 8001c1a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	fa92 f1a2 	rbit	r1, r2
 8001c24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c28:	6011      	str	r1, [r2, #0]
  return result;
 8001c2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fab2 f282 	clz	r2, r2
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f042 0220 	orr.w	r2, r2, #32
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f002 021f 	and.w	r2, r2, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d19e      	bne.n	8001b8a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f023 020f 	bic.w	r2, r3, #15
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	492c      	ldr	r1, [pc, #176]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a19      	ldr	r1, [r3, #32]
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	4925      	ldr	r1, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c94:	601a      	str	r2, [r3, #0]
  return result;
 8001c96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c9a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	2301      	movs	r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe ff0f 	bl	8000ad4 <HAL_GetTick>
 8001cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cba:	e009      	b.n	8001cd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ff0a 	bl	8000ad4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e109      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001cd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0xc48>
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e01e      	b.n	8001d48 <HAL_RCC_OscConfig+0xc80>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0xe28>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d60:	6011      	str	r1, [r2, #0]
  return result;
 8001d62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f002 021f 	and.w	r2, r2, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d09b      	beq.n	8001cbc <HAL_RCC_OscConfig+0xbf4>
 8001d84:	e0ad      	b.n	8001ee2 <HAL_RCC_OscConfig+0xe1a>
 8001d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d9e:	601a      	str	r2, [r3, #0]
  return result;
 8001da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fe8a 	bl	8000ad4 <HAL_GetTick>
 8001dc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fe85 	bl	8000ad4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e084      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df2:	601a      	str	r2, [r3, #0]
  return result;
 8001df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0xd4c>
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_RCC_OscConfig+0xe28>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd84>
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f107 0320 	add.w	r3, r7, #32
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_RCC_OscConfig+0xe28>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f107 0214 	add.w	r2, r7, #20
 8001e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	f107 0214 	add.w	r2, r7, #20
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	fa92 f1a2 	rbit	r1, r2
 8001e60:	f107 0210 	add.w	r2, r7, #16
 8001e64:	6011      	str	r1, [r2, #0]
  return result;
 8001e66:	f107 0210 	add.w	r2, r7, #16
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d19e      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xcfe>
 8001e88:	e02b      	b.n	8001ee2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e025      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_RCC_OscConfig+0xe28>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_RCC_OscConfig+0xe28>)
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ea8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001eac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d111      	bne.n	8001ede <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001eba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d108      	bne.n	8001ede <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09e      	sub	sp, #120	; 0x78
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e162      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b90      	ldr	r3, [pc, #576]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	498b      	ldr	r1, [pc, #556]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e14a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	497f      	ldr	r1, [pc, #508]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80dc 	beq.w	8002120 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d13c      	bne.n	8001fea <HAL_RCC_ClockConfig+0xf6>
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xa6>
 8001f94:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e00f      	b.n	8001fba <HAL_RCC_ClockConfig+0xc6>
 8001f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	663b      	str	r3, [r7, #96]	; 0x60
 8001fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f002 021f 	and.w	r2, r2, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d17b      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0f3      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d13c      	bne.n	800206c <HAL_RCC_ClockConfig+0x178>
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d102      	bne.n	800201c <HAL_RCC_ClockConfig+0x128>
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e00f      	b.n	800203c <HAL_RCC_ClockConfig+0x148>
 800201c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002020:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
 800202a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
 8002030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002040:	63ba      	str	r2, [r7, #56]	; 0x38
 8002042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800204a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f042 0220 	orr.w	r2, r2, #32
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f002 021f 	and.w	r2, r2, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d13a      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b2      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
 800206c:	2302      	movs	r3, #2
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_ClockConfig+0x1a0>
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e00d      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1bc>
 8002094:	2302      	movs	r3, #2
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	2302      	movs	r3, #2
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2202      	movs	r2, #2
 80020b2:	61ba      	str	r2, [r7, #24]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	617a      	str	r2, [r7, #20]
  return result;
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	fab2 f282 	clz	r2, r2
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f042 0220 	orr.w	r2, r2, #32
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f002 021f 	and.w	r2, r2, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e079      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	491a      	ldr	r1, [pc, #104]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7fe fcf0 	bl	8000ad4 <HAL_GetTick>
 80020f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe fcec 	bl	8000ad4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e061      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d214      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4906      	ldr	r1, [pc, #24]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e040      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4912      	ldr	r1, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002196:	f000 f829 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 800219a:	4601      	mov	r1, r0
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	22f0      	movs	r2, #240	; 0xf0
 80021a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	fa92 f2a2 	rbit	r2, r2
 80021ae:	60fa      	str	r2, [r7, #12]
  return result;
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	40d3      	lsrs	r3, r2
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x2ec>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	fa21 f303 	lsr.w	r3, r1, r3
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_RCC_ClockConfig+0x2f0>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCC_ClockConfig+0x2f4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fc3e 	bl	8000a4c <HAL_InitTick>
  
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3778      	adds	r7, #120	; 0x78
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	0800310c 	.word	0x0800310c
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x30>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x36>
 800221a:	e03f      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800221e:	623b      	str	r3, [r7, #32]
      break;
 8002220:	e03f      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002228:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800222c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	607a      	str	r2, [r7, #4]
  return result;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	220f      	movs	r2, #15
 8002250:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	60fa      	str	r2, [r7, #12]
  return result;
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	40d3      	lsrs	r3, r2
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fbb2 f2f3 	udiv	r2, r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	e007      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fbb2 f2f3 	udiv	r2, r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	623b      	str	r3, [r7, #32]
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800229e:	623b      	str	r3, [r7, #32]
      break;
 80022a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a2:	6a3b      	ldr	r3, [r7, #32]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	372c      	adds	r7, #44	; 0x2c
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40021000 	.word	0x40021000
 80022b4:	007a1200 	.word	0x007a1200
 80022b8:	0800311c 	.word	0x0800311c
 80022bc:	0800312c 	.word	0x0800312c

080022c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b092      	sub	sp, #72	; 0x48
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80d4 	beq.w	800248c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e4:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10e      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	4a4a      	ldr	r2, [pc, #296]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fa:	61d3      	str	r3, [r2, #28]
 80022fc:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7fe fbd5 	bl	8000ad4 <HAL_GetTick>
 800232a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7fe fbd1 	bl	8000ad4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1d6      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002354:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8084 	beq.w	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002368:	429a      	cmp	r2, r3
 800236a:	d07c      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	461a      	mov	r2, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d04b      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fb81 	bl	8000ad4 <HAL_GetTick>
 80023d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fb7d 	bl	8000ad4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e180      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023ec:	2302      	movs	r3, #2
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	2302      	movs	r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	61fb      	str	r3, [r7, #28]
  return result;
 8002404:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d108      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800241a:	4b01      	ldr	r3, [pc, #4]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	e00d      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	10908100 	.word	0x10908100
 800242c:	2302      	movs	r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	4ba0      	ldr	r3, [pc, #640]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	2202      	movs	r2, #2
 800243e:	613a      	str	r2, [r7, #16]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	fa92 f2a2 	rbit	r2, r2
 8002446:	60fa      	str	r2, [r7, #12]
  return result;
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	fab2 f282 	clz	r2, r2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f002 021f 	and.w	r2, r2, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f202 	lsl.w	r2, r1, r2
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0b7      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002466:	4b95      	ldr	r3, [pc, #596]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4992      	ldr	r1, [pc, #584]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002478:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4a8d      	ldr	r2, [pc, #564]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002498:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f023 0203 	bic.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4985      	ldr	r1, [pc, #532]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b6:	4b81      	ldr	r3, [pc, #516]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	497e      	ldr	r1, [pc, #504]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d4:	4b79      	ldr	r3, [pc, #484]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4976      	ldr	r1, [pc, #472]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f2:	4b72      	ldr	r3, [pc, #456]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f023 0210 	bic.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	496f      	ldr	r1, [pc, #444]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	4967      	ldr	r1, [pc, #412]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f023 0220 	bic.w	r2, r3, #32
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4960      	ldr	r1, [pc, #384]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254c:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	4958      	ldr	r1, [pc, #352]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800256a:	4b54      	ldr	r3, [pc, #336]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4951      	ldr	r1, [pc, #324]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002588:	4b4c      	ldr	r3, [pc, #304]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4949      	ldr	r1, [pc, #292]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4942      	ldr	r1, [pc, #264]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025c4:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	493a      	ldr	r1, [pc, #232]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	4933      	ldr	r1, [pc, #204]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	492b      	ldr	r1, [pc, #172]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4924      	ldr	r1, [pc, #144]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	491c      	ldr	r1, [pc, #112]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	4915      	ldr	r1, [pc, #84]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	490d      	ldr	r1, [pc, #52]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a2:	4906      	ldr	r1, [pc, #24]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	e002      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	490b      	ldr	r1, [pc, #44]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e6:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3748      	adds	r7, #72	; 0x48
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e049      	b.n	80027a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe f8e2 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3304      	adds	r3, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f000 faac 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e04f      	b.n	8002864 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_TIM_Base_Start_IT+0xc4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01d      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x76>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ee:	d018      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x76>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_TIM_Base_Start_IT+0xc8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x76>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <HAL_TIM_Base_Start_IT+0xcc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x76>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_TIM_Base_Start_IT+0xd0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x76>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_TIM_Base_Start_IT+0xd4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_TIM_Base_Start_IT+0x76>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_TIM_Base_Start_IT+0xd8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d115      	bne.n	800284e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_TIM_Base_Start_IT+0xdc>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d015      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0xb4>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d011      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284c:	e008      	b.n	8002860 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e000      	b.n	8002862 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002860:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40000400 	.word	0x40000400
 8002878:	40000800 	.word	0x40000800
 800287c:	40013400 	.word	0x40013400
 8002880:	40014000 	.word	0x40014000
 8002884:	40015000 	.word	0x40015000
 8002888:	00010007 	.word	0x00010007

0800288c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0202 	mvn.w	r2, #2
 80028b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f9c3 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f9b5 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9c6 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0204 	mvn.w	r2, #4
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f999 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f98b 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f99c 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0208 	mvn.w	r2, #8
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2204      	movs	r2, #4
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f96f 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f961 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f972 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0210 	mvn.w	r2, #16
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2208      	movs	r2, #8
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f945 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f937 	bl	8002c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f948 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0201 	mvn.w	r2, #1
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd ff2a 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d107      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fafc 	bl	8003034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d10e      	bne.n	8002a6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d107      	bne.n	8002a6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 faef 	bl	8003048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d10e      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d107      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8f6 	bl	8002c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d107      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0220 	mvn.w	r2, #32
 8002aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 faaf 	bl	8003020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_ConfigClockSource+0x1c>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ab      	b.n	8002c3e <HAL_TIM_ConfigClockSource+0x174>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d067      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x128>
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d80b      	bhi.n	8002b3e <HAL_TIM_ConfigClockSource+0x74>
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d073      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x148>
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d802      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x6a>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d06f      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x148>
 8002b32:	e077      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d06c      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x148>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d06a      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x148>
 8002b3c:	e072      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x15a>
 8002b3e:	2b70      	cmp	r3, #112	; 0x70
 8002b40:	d00d      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x94>
 8002b42:	2b70      	cmp	r3, #112	; 0x70
 8002b44:	d804      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x86>
 8002b46:	2b50      	cmp	r3, #80	; 0x50
 8002b48:	d033      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0xe8>
 8002b4a:	2b60      	cmp	r3, #96	; 0x60
 8002b4c:	d041      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x108>
 8002b4e:	e069      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x15a>
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d069      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x160>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5a:	d017      	beq.n	8002b8c <HAL_TIM_ConfigClockSource+0xc2>
 8002b5c:	e062      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f000 f9ab 	bl	8002ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
      break;
 8002b8a:	e04f      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f000 f994 	bl	8002ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bae:	609a      	str	r2, [r3, #8]
      break;
 8002bb0:	e03c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 f908 	bl	8002dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2150      	movs	r1, #80	; 0x50
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f961 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e02c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f927 	bl	8002e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2160      	movs	r1, #96	; 0x60
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f951 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e01c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f8e8 	bl	8002dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2140      	movs	r1, #64	; 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f941 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e00c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f000 f938 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c22:	e003      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e000      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x162>
      break;
 8002c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3f      	ldr	r2, [pc, #252]	; (8002db8 <TIM_Base_SetConfig+0x120>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3e      	ldr	r2, [pc, #248]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3d      	ldr	r2, [pc, #244]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3c      	ldr	r2, [pc, #240]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d01b      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <TIM_Base_SetConfig+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d017      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00f      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2c      	ldr	r2, [pc, #176]	; (8002dc8 <TIM_Base_SetConfig+0x130>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <TIM_Base_SetConfig+0x134>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <TIM_Base_SetConfig+0x138>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <TIM_Base_SetConfig+0x100>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00f      	beq.n	8002d98 <TIM_Base_SetConfig+0x100>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <TIM_Base_SetConfig+0x130>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00b      	beq.n	8002d98 <TIM_Base_SetConfig+0x100>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <TIM_Base_SetConfig+0x134>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_Base_SetConfig+0x100>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <TIM_Base_SetConfig+0x138>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0x100>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40013400 	.word	0x40013400
 8002dc4:	40015000 	.word	0x40015000
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40014400 	.word	0x40014400
 8002dd0:	40014800 	.word	0x40014800

08002dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 030a 	bic.w	r3, r3, #10
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f023 0210 	bic.w	r2, r3, #16
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	031b      	lsls	r3, r3, #12
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f043 0307 	orr.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	609a      	str	r2, [r3, #8]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e06d      	b.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a30      	ldr	r2, [pc, #192]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d01d      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d018      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a16      	ldr	r2, [pc, #88]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10c      	bne.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40013400 	.word	0x40013400
 8003010:	40015000 	.word	0x40015000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40014000 	.word	0x40014000

08003020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4e0d      	ldr	r6, [pc, #52]	; (8003094 <__libc_init_array+0x38>)
 8003060:	4c0d      	ldr	r4, [pc, #52]	; (8003098 <__libc_init_array+0x3c>)
 8003062:	1ba4      	subs	r4, r4, r6
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	2500      	movs	r5, #0
 8003068:	42a5      	cmp	r5, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	4e0b      	ldr	r6, [pc, #44]	; (800309c <__libc_init_array+0x40>)
 800306e:	4c0c      	ldr	r4, [pc, #48]	; (80030a0 <__libc_init_array+0x44>)
 8003070:	f000 f820 	bl	80030b4 <_init>
 8003074:	1ba4      	subs	r4, r4, r6
 8003076:	10a4      	asrs	r4, r4, #2
 8003078:	2500      	movs	r5, #0
 800307a:	42a5      	cmp	r5, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003084:	4798      	blx	r3
 8003086:	3501      	adds	r5, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800308e:	4798      	blx	r3
 8003090:	3501      	adds	r5, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	0800313c 	.word	0x0800313c
 8003098:	0800313c 	.word	0x0800313c
 800309c:	0800313c 	.word	0x0800313c
 80030a0:	08003140 	.word	0x08003140

080030a4 <memset>:
 80030a4:	4402      	add	r2, r0
 80030a6:	4603      	mov	r3, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	f803 1b01 	strb.w	r1, [r3], #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <_init>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr

080030c0 <_fini>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr
